* docker pull mongo ==> mongoyu docker images dan çekmek

* docker run mongo ==> varsa çalıştırma yoksa pullayıp çalıştırma

* docker run ubuntu ==> çalışıp hemen kapanır çünkü ubuntu bir işletim sistemidir görev verilmediği için açılır ve kapanır.
	Bunun için docker run ubuntu sleep 5 dersen 5 sn bekler öyle kapanır.
	Fakat ubuntunun içine girmek için docker run -it ubuntu

* docker run -it ubuntu ==> ubuntunun içine girmek

* exit ==> dışına çıkmak 

* docker images ==> images listeleme

* docker ps ==> ayakta olan conteinerlar.

* docker ps --all == docker ps -a ==> geçmişte çalışan tüm conteinerlar.

* docker conteiner ls -a ==> aktif olan ve olmayan tüm conteinerlar.

* docker run -it --name bash_ubuntu ubuntu ==> ubuntu ımagesınden çalışan conteinera bash_ubuntu ismini verdik.

* docker start bash_ubuntu ==> isim verilen conteiner çalışır.

* docker stop bash_ubuntu ==> isim verilen conteiner ı sonlandırmak.

	* docker run -it ubuntu ==> docker start bash_ubuntu ,docker stop bash_ubuntu işlemlerinden sonra yazıldığı zaman random isim üretir yeni bir instance çalıştı.
	* docker stop name veya id ile durudur.

* docker rm container id veya container name ==> geçmişte çalışmış conteiner silme
 	* docker rm 0d 
	* docker rm bash_ubuntu

* docker rm idlerin baştan 2 harflerini boşluk bırakarak yazarsak containerların hepsini silebiliriz. Çünkü id ler uniq.
	* docker rm 01 b2 8d g3

* docker container rm $(docker container ls -aq) ==> tüm conatiner ları silmek.

* docker run redis:5 ==> redis 5 sürümünü (tag) çalıştır.


* docker run -d redis ==> arka planda çalışsın.aynı terminalden komutlarıma edebileyim. ( -d = detach )
	docker run redis yazımında devamında kod yazımı engellendi.
	* docker container logs container id ==> arka planda çalışırken görmediğim logları getirir. (başladığı andan basıldığı ana kadar).
 	* docker attach ==> basıldığı andan itibaren logları gösterir!!

* docker attach container id ==> tekrar container a connect olmak.
 	-- örneğin sürekli olarak her 1 saniyede tarih loglayan uygulamayı arka planda çalıştırmak isteriz çünkü terminal de bizi block lar. kod yazmamıza izin vermez !!


 * docker run -it images adı ==> örneğin uygulamanız kullanıcıdan girdi alıyorsa -it (interactive terminal) yazılmalıdır docker run ımages name yazılırsa kullanıcıdan girdiyi beklemez sonlanır.Tıpkı ubuntu örneğindeki gibi.


----Not -----
 Containerlar docker host üzerinde çalışırlar. Docker hostun kendisine ait networku var.
 Containerlar gateway üzerinden aksi belirtilmediği sürece bir ip ye sahipler.


---------------Port Mapping ----------------------

* docker run -p 3001:3000 omer/app
	* docker run -p iç port:dış port omer/app

-- Örneğin bir web sunucusu uygulaması docker üzerinde 3000 portunda çalışıyorsa Tarayıcıdan localhost:3000 de çalışmayacaktır. Çünkü 3000 portunda çalışan aslında docker hostu üzerinde çalışır.
	Bunun için önce docker host'a bağlanmak için gereken portu (iç port ) sonra docker host üzerindeki portu (dış port) yazmamız gerekir.
	docker run -p 3001:3000 omer/app ==> 3001 portunu biz belirledik.
	3001 portuyla docker hostuna bağlanmak istiyorum. 3000 portuylada docker host üzerindeki uygulamamabağlanmalıyım.
	dış portu docker kendisi belirler (aksi belirtilmezse).

-- docker run -p 3000:3000 -d omer/app

-- docker run -p 3001:3000 -d omer/app

-- docker run -p 3002:3000 -d omer/app

==>3000,3001,3002 portlarıyla birlikte aynı uygulamayı ayağı kaldırdık. 3 container ayağı kaldırdık.

---------------Port Mapping ----------------------
